import threading
import time
import math
import logging
import os

from System.Workers.Thread import Thread
from System.Datastore import GAPFile

class TaskWorker(Thread):

    READY           = 0
    RUNNING         = 1
    COMPLETE        = 2
    CANCELLED       = 3

    def __init__(self, task, datastore, platform):
        # Class for executing task

        # Initialize new thread
        err_msg = "TaskWorker for %s has stopped working!" % task.get_ID()
        super(TaskWorker, self).__init__(err_msg)

        # Task to be executed
        self.task = task
        self.module = self.task.get_module()

        # Datastore for getting/setting task output
        self.datastore = datastore

        # Platform upon which task will be executed
        self.platform = platform

        # Status attributes
        self.status_lock = threading.Lock()
        self.status = TaskWorker.READY

        # Processor for executing task
        self.proc = None

        # Output directory where final output will be saved
        self.final_output_dir = os.path.join(self.platform.get_final_output_dir(), self.task.get_ID())

    def set_status(self, new_status):
        # Updates instance status with threading.lock() to prevent race conditions
        with self.status_lock:
            self.status = new_status

    def get_status(self):
        # Returns instance status with threading.lock() to prevent race conditions
        with self.status_lock:
            return self.status

    def get_task(self):
        return self.task

    def task(self):
        try:
            # Try to execute task
            self.set_status(TaskWorker.RUNNING)
            self.__execute()

        except BaseException, e:
            # Handle but do not raise exception if job was externally cancelled
            if self.get_status() is TaskWorker.CANCELLED:
                logging.warning("Execution of task with id '%s' has been externally cancelled!")

        finally:
            # Destroy processor if it exists
            if self.platform.has_task_processor(self.task.get_ID()):
                self.__persist_task_logs()
                self.platform.destroy_task_processor(self.proc)

            # Notify that task worker has completed regardless of success
            self.set_status(TaskWorker.COMPLETE)

    def __execute(self):

        # Set the input arguments that will be passed to the task module
        self.__set_input_args()

        # Compute and set task resource requirements
        cpus        = self.module.get_arguments("nr_cpus")
        mem         = self.module.get_arguments("mem")
        input_files = self.module.get_input_files()
        disk_space  = self.__compute_disk_requirements(input_files)

        # Wait for platform to have enough resources to run task
        while not self.platform.can_run_task(cpus, mem, disk_space) and not TaskWorker.CANCELLED:
            time.sleep(5)

        # Simply return if no command given
        if not self.module.is_runnable():
            return

        # Create processor, run task module command, process output, and persist any output files
        task_id = self.task.get_ID()
        input_files = self.task.get_input_files()

        # Create processor capable of running task
        # Load input files required by task module onto processor
        self.proc = self.platform.get_processor(task_id, cpus, mem, disk_space, input_files)

        # Run the command generated by the module and store output in appropriate directory
        tmp_output_dir = self.proc.get_output_dir()
        cmd = self.module.get_command(tmp_output_dir)

        # Run command and wait for output
        self.proc.run_command(job_name = task_id, cmd=cmd)
        out, err = self.proc.wait_process(task_id)

        # Process command output if necessary
        self.module.process_cmd_output(out, err)

        # Save output files
        self.platform.persist(self.proc, tmp_output_dir, self.final_output_dir)

        # Update paths of output files
        for  output_file in self.task.get_output_files():
            output_file.update_path(dest_dir = self.final_output_dir)

    def __persist_task_logs(self):
        try:
            # Return log files no matter what
            proc_log_dir = self.proc.get_log_dir()
            self.platform.persist(self.proc, proc_log_dir, self.final_output_dir)
        except BaseException, e:
            # Handle but don't raise any exceptions and report why logs couldn't be returned
            logging.error("Unable to return logs for task '%s'!" % self.task.get_ID())
            if e.message != "":
                logging.error("Recieved the following error:\n%s" % e.message)

    def __set_input_args(self):

        # Get required arguments for task module
        task_id = self.task.get_ID()
        input_types = self.task.get_input_keys()

        # Get and set arg values from datastore
        for input_type in input_types:
            val = self.datastore.get_task_arg(task_id, input_type)
            if val is not None:
                self.task.get_module().set_argument(input_type, val)

        # Make sure nr_cpus, mem arguments are properly formatted
        self.__format_nr_cpus()
        self.__format_mem()

    def __format_nr_cpus(self):
        # Makes sure the argument for nr_cpus is valid
        nr_cpus  = self.module.get_arguments("nr_cpus")
        max_cpus = self.platform.get_max_cpus()

        # CPUs = 'max' converted to platform maximum cpus
        if isinstance(nr_cpus, basestring) and nr_cpus.lower() == "max":
            # Set special case for maximum nr_cpus
            nr_cpus = max_cpus

        # CPUs > 'max' converted to maximum cpus
        elif nr_cpus > max_cpus:
            nr_cpus = max_cpus

        # Update module nr_cpus argument
        self.module.set_argument("nr_cpus", int(nr_cpus))

    def __format_mem(self):
        mem = self.module.get_argments("mem")
        nr_cpus = self.module.get_arguments("nr_cpus")
        max_mem = self.platform.get_max_mem()
        if isinstance(mem, basestring):
            # Special case where mem is platform max
            if mem.lower() == "max":
                mem = max_mem
            # Special case if memory is scales with nr_cpus (e.g. 'nr_cpus * 1.5')
            elif "nr_cpus" in mem.lower():
                mem_expr = mem.lower()
                mem = int(eval(mem_expr.replace("nr_cpus", str(nr_cpus))))
        # Set to platform max mem if over limit
        if mem > max_mem:
            mem = max_mem
        # Update module memory argument
        self.module.set_argument("mem", int(mem))

    def __compute_disk_requirements(self, input_files, input_multiplier=2):
        # Compute size of disk needed to store input/output files
        input_size = 0
        args = self.task.get_input_args()
        for arg_key, arg in args.iteritems():
            input = arg.get_value()
            # Determine if arg is a file
            if isinstance(input.get_value(), GAPFile):
                # Check to see if file size exists
                if input.get_file_size() is None:
                    # Calc input size of file
                    input.set_file_size(self.platform.calc_file_size(input))
                # Increment input file size (GB)
                input_size += input.get_file_size()

        # Set size of desired disk
        disk_size = int(math.ceil(input_multiplier * input_size))

        # Make sure platform can create a disk that size
        min_disk_size = self.platform.get_min_disk_size()
        max_disk_size = self.platform.get_max_disk_size()

        # Must be at least as big as minimum disk size
        disk_size = max(disk_size, min_disk_size)

        # And smaller than max disk size
        disk_size = min(disk_size, max_disk_size)
        #logging.debug("Computing disk size for task '%s': %s" % (self.task.get_ID(), disk_size))
        return disk_size


