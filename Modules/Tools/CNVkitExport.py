import os
from Modules import Module

class CNVkitExport(Module):
    def __init__(self, module_id):
        super(CNVkitExport, self).__init__(module_id)

        self.input_keys = ["cns", "cnvkit", "nr_cpus", "mem"]

        self.output_keys = ["seg"]

        # Command should be run on main processor
        self.quick_command = True

    def define_input(self):
        self.add_argument("cns",        is_required=True)
        self.add_argument("cnvkit",     is_required=True, is_resource=True)
        self.add_argument("nr_cpus",    is_required=True, default_value=8)
        self.add_argument("mem",        is_required=True, default_value="nr_cpus * 2")

    def define_output(self, platform, split_name=None):

        #generate unique name for reference bin file generated by CNVKit
        seg_file = self.generate_unique_file_name(split_name=split_name, extension=".seg.txt")
        self.add_output(platform, "seg", seg_file)

    def define_command(self, platform):

        # Get arguments
        cns                 = self.get_arguments("cns").get_value()
        cnvkit              = self.get_arguments("cnvkit").get_value()

        #get the filename which store segmentation values
        seg_file            = self.get_output("seg")

        #join cns file names with space delimiter
        cns = " ".join(cns)

        #command line to export CNVkit CNS to GISTIC2 seg format
        cmd = "python {0} export seg {1} -o {2} !LOG3!".format(cnvkit, cns, seg_file)

        return cmd