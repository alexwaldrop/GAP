import os
from Modules import Module

class CNVkit(Module):
    def __init__(self, module_id):
        super(CNVkit, self).__init__(module_id)

        self.input_keys = ["sample_name", "bam", "bam_idx", "cnvkit", "ref", "targets", "refFlat",
                           "access", "method", "is_tumor", "pooled_normal", "nr_cpus", "mem"]

        self.output_keys = ["ref_cnn", "cnr", "cns"]

        # Command should be run on main processor
        self.quick_command = False

    def define_input(self):
        self.add_argument("sample_name",        is_required=True)
        self.add_argument("bam",                is_required=True)
        self.add_argument("bam_idx",            is_required=True)
        self.add_argument("cnvkit",             is_required=True, is_resource=True)
        self.add_argument("ref",                is_required=True, is_resource=True)
        self.add_argument("targets",            is_required=True, is_resource=True)
        self.add_argument("refFlat",            is_required=True, is_resource=True)
        self.add_argument("access",             is_required=True, is_resource=True)
        self.add_argument("method",             is_required=True, default_value="hybrid")
        self.add_argument("is_tumor",           is_required=True)
        self.add_argument("pooled_normal",      is_required=True)
        self.add_argument("nr_cpus",            is_required=True, default_value=32)
        self.add_argument("mem",                is_required=True, default_value="nr_cpus * 2")

    def define_output(self, platform, split_name=None):

        #generate unique name for reference bin file generated by CNVKit
        ref_cnn = self.generate_unique_file_name(split_name=split_name, extension=".cnn")

        #get bam file names from the sample sheet
        bams    = self.get_arguments("bam").get_value()

        #checkwhether user provided a single sample bam or bams for mutiple samples
        if isinstance(bams, list):

            # empty list to hold cnr and cns file names to return
            cnr = []
            cns = []

            for bam in bams:
                bam_file_ele = os.path.splitext(bam)
                cnr_file = "{0}.{1}".format(bam_file_ele[0], "cnr")
                cns_file = "{0}.{1}".format(bam_file_ele[0], "cns")
                cnr.append(cnr_file)
                cns.append(cns_file)

            self.add_output(platform, "cnr", cnr, is_path=False)
            self.add_output(platform, "cns", cns, is_path=False)

        else:
            bam_file_ele = os.path.splitext(bams)
            cnr = "{0}.{1}".format(bam_file_ele[0], "cnr")
            cns = "{0}.{1}".format(bam_file_ele[0], "cns")

            self.add_output(platform, "cnr", cnr)
            self.add_output(platform, "cns", cns)

        self.add_output(platform, "ref_cnn", ref_cnn)

    def define_command(self, platform):

        # Get arguments
        bam                 = self.get_arguments("bam").get_value()
        cnvkit              = self.get_arguments("cnvkit").get_value()
        ref                 = self.get_arguments("ref").get_value()
        targets             = self.get_arguments("targets").get_value()
        refFlat             = self.get_arguments("refFlat").get_value()
        access              = self.get_arguments("access").get_value()
        is_tumor            = self.get_arguments("is_tumor").get_value()
        pooled_normal       = self.get_arguments("pooled_normal").get_value()
        method              = self.get_arguments("method").get_value()
        nr_cpus             = self.get_arguments("nr_cpus").get_value()

        ref_cnn             = self.get_output("ref_cnn")

        # Get current working dir
        working_dir = platform.get_workspace_dir()

        #holds a list of tumor bams
        tumor_bams = []

        #holds a list of pooled_normal bams
        pooled_normal_bams = []

        # holds a list of normal bams
        normal_bams = []
        
        #holds updated pooled normal file names
        updated_pooled_normal_bams = []

        #generate a list of tumor and pooled normal sample BAM files
        for bam, is_tumor, pooled_normal in zip(bam, is_tumor, pooled_normal):
            if is_tumor:
                tumor_bams.append(bam)
                continue

            if pooled_normal:
                pooled_normal_bams.append(bam)

            normal_bams.append(bam)

        for pooled_normal_bam in pooled_normal_bams:
            file_name = "{0}_{1}".format(os.path.splitext(pooled_normal_bam)[0], "normal.bam")
            updated_pooled_normal_bams.append(file_name)
            platform.run_quick_command(job_name = "rename files", cmd = "cp {0} {1}".format(pooled_normal_bam, file_name))

        #join bams with space delimiter
        tumor_bams = " ".join(tumor_bams)
        normal_bams = " ".join(normal_bams)
        updated_pooled_normal_bams = " ".join(updated_pooled_normal_bams)

        #generate command line for cnvkit for hybrid (WES) method
        if method == "hybrid":
            cmd1 = "python {0} batch {1} --normal {2} --targets {3} --annotate {4} --fasta {5} --access {6} " \
                  "--output-reference {7} --output-dir {8} -p {9} --drop-low-coverage --diagram --scatter".\
                  format(cnvkit, tumor_bams, updated_pooled_normal_bams, targets, refFlat, ref, access, ref_cnn, working_dir, nr_cpus)
            cmd2 = "python {0} batch {1} --normal {2} --targets {3} --annotate {4} --fasta {5} --access {6} " \
                  "--output-reference {7} --output-dir {8} -p {9} --drop-low-coverage --diagram --scatter". \
                  format(cnvkit, normal_bams, updated_pooled_normal_bams, targets, refFlat, ref, access, ref_cnn, working_dir, nr_cpus)

        # generate command line for cnvkit for WGS method
        elif method == "wgs":
            cmd1 = "python {0} batch {1} --normal {2} --targets {3} --annotate {4} --fasta {5} --output-reference {6} " \
                  "--output-dir {7} -p {8} --method {9} --drop-low-coverage --diagram --scatter". \
                  format(cnvkit, tumor_bams, updated_pooled_normal_bams, targets, refFlat, ref, ref_cnn, working_dir,
                       nr_cpus, method)
            cmd2 = "python {0} batch {1} --normal {2} --targets {3} --annotate {4} --fasta {5} --output-reference {6} " \
                   "--output-dir {7} -p {8} --method {9} --drop-low-coverage --diagram --scatter". \
                   format(cnvkit, normal_bams, updated_pooled_normal_bams, targets, refFlat, ref, ref_cnn, working_dir,
                       nr_cpus, method)
        else:
            raise NotImplementedError("Method {0} is not implemented in CNVKit module.".format(method))

        cmd = "{0} !LOG3!; {1} !LOG3!".format(cmd1, cmd2)

        return cmd